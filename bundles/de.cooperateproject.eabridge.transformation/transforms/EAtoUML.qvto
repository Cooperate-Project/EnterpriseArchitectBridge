import TransformationUtils;
import de.cooperateproject.qvtoutils.CooperateLibrary;

transformation EAtoUML(in om : OM, in ecorePrimitives : UML, inout uml : UML, inout notation : NOTATION);

modeltype OM uses eaobjectmodel('de.cooperateproject.eabridge.eaobjectmodel');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype NOTATION uses notation('http://www.eclipse.org/gmf/runtime/1.0.2/notation');
modeltype STYLE uses style('http://www.eclipse.org/papyrus/infra/gmfdiag/style');

// we cannot map the root package but only its contents
// assumption: only a sub-package of the root package is given as transformation input
main() {
	
	var inputPackages := om.rootObjects()[Package];
	assert fatal (inputPackages->size() = 1);
	var inputPackage := inputPackages->any(true);

	// mapping to UML model		
	inputPackage-> map mapRootPackage();
	
	// mapping to Notation model
	var diagrams := inputPackage.getAllContents()->selectByType(Diagram);
	diagrams->map diagramToDiagram();
}

// mappings for transformation to uml

mapping eaobjectmodel::Package::mapRootPackage() : uml::Model {
	log("mapping Model", self.Name);
	
	name := self.Name;
	result.addToFeature("packagedElement", self.Packages-> map mapPackage());
	
	var connectors := self.getAllContents()->selectByType(Connector);
	var associations := connectors->select(e : Connector | e.Type = ConnectorType::Association or e.Type = ConnectorType::Aggregation);
	var comments := self.getAllContents()->selectByType(Element)->select(c : Element | c.Type = ElementType::Note);
	
	result.addToFeature("packagedElement", associations -> map mapConnectorToAssociation());
	result.addToFeature("ownedComment", comments -> mapElementToComment());
}

mapping eaobjectmodel::Package::mapPackage() : uml::Package {
	log("mapping Package", self.Name);

	name := self.Name;
	
	result.addToFeature("packagedElement", self.Packages-> map mapPackage());

	var classifiers := self.Elements->select(e | e.Type = eaobjectmodel::ElementType::Class or e.Type = eaobjectmodel::ElementType::Interface);
	var imports := self.getAssociatedElement().SourceRelations->select(e | e.Type = ConnectorType::Package and e.Stereotype = "import");
	
	result.addToFeature("packagedElement", classifiers-> map mapElementToClassifier());
	result.setToFeature("packageImport", imports->map mapConnectorToPackageImport());
}

mapping eaobjectmodel::Element::mapElementToClassifier() : uml::Classifier
disjuncts eaobjectmodel::Element::mapElementToClass, eaobjectmodel::Element::mapElementToInterface;

mapping Connector::mapClassesToUsage():  Usage {
	name := self.Name;
	supplier += self.Source.oclAsType(Class);
	supplier += self.Dest.oclAsType(Class);
}
mapping Connector::mapClassesToDependencies():  Dependency {
	name := self.Name;
	supplier += self.Source.oclAsType(Class);
	supplier += self.Dest.oclAsType(Class);	
}
mapping Connector::mapClassesToInformationflows():  InformationFlow {
	name := self.Name;
	informationSource := self.Source.oclAsType(Class);
	informationTarget := self.Dest.oclAsType(Class);
}

abstract mapping Element::mapElementToClassifierBase() : uml::Classifier {
	name := self.Name;
	visibility := self.Visibility.getAttributeType();
	isAbstract := self.Abstract;
	
	var generalizations = self.SourceRelations->select(e : Connector| e.Type = ConnectorType::Generalization);
	var substitutions   = self.SourceRelations->select(e : Connector| e.Type = ConnectorType::Substitution);
	
	result.setToFeature("generalization", generalizations -> map mapConnectoToGeneralization());
	result.setToFeature("substitution", substitutions -> map mapConnectoToSubstitution());
}

mapping Element::mapElementToClass() : uml::Class
inherits Element::mapElementToClassifierBase
when {self.Type = eaobjectmodel::ElementType::Class}
{	
	ownedAttribute += self.Attributes-> map transformAttribute();
	ownedOperation += self.Methods-> map transformOperations();
	
	var realizations = self.SourceRelations->select(e : Connector | e.Type = ConnectorType::Realisation);	
	
	result.setToFeature("interfaceRealization", realizations -> map mapConnectoToRealization());
}

mapping Element::mapElementToInterface() : uml::Interface
inherits Element::mapElementToClassifierBase
when {self.Type = eaobjectmodel::ElementType::Interface}
{
	ownedAttribute := self.Attributes-> map transformAttribute();
	ownedOperation := self.Methods-> map transformOperations();
	isAbstract := false;	
}

mapping Element::mapElementToComment() : uml::Comment
when {self.Type = eaobjectmodel::ElementType::Note}
{
	body := self.Notes;
	
	var commentLinks = self.getAllContents(true)->selectByType(Connector)->select(e : Connector | e.Type = ConnectorType::NoteLink);
	var commentedElements = commentLinks->select(e : Connector | e.Source = self).Dest->union(commentLinks->select(e : Connector | e.Dest = self).Source);

	result.addToFeature("annotatedElement", commentedElements.findCommentedUMLElement());
}

mapping Attribute::transformAttribute() :  uml::Property
merges Attribute::transformAttributeClassifier, Attribute::transformAttributePrimitive
{
	name := self.Name;
	visibility := self.Scope.getAttributeType();
}

mapping Attribute::transformAttributeClassifier() : uml::Property
when {self.AttributeType.classifier != null}
{
	type := self.AttributeType.classifier.late resolveone(uml::Classifier);
}

mapping Attribute::transformAttributePrimitive() : uml::Property
when {self.AttributeType.classifier = null}
{
	type := self.AttributeType.getPrimitiveType().transformPrimitive();
}

mapping Connector::mapConnectoToGeneralization() :  Generalization
{
	general := self.Dest.late resolveone(uml::Classifier);
}
mapping Connector::mapConnectoToSubstitution() :  uml::Substitution
{
	supplier := self.Dest.late resolveone(uml::Classifier);
}
mapping Connector::mapConnectoToRealization() :  InterfaceRealization
{
	supplier := self.Dest.late resolveone(uml::Classifier);
	contract := self.Dest.late resolveone(uml::Interface);
}

mapping Connector::mapConnectorToPackageImport() : PackageImport {
	
	importedPackage := self.Dest.PDATA1.late resolveone(uml::Package);
}

mapping Connector::mapConnectorToAssociation() : uml::Association
{	
	name := self.Name;
	//order of memberEnds
	memberEnd += self.map mapSourceToProperty();
	memberEnd += self.map mapDestToProperty();
	// does not work for ownedAttributes of Interfaces
	
	// FIXME We should NOT change already created objects from within other mappings!
	if (self.SourceIsNavigable) 
		then (self.Dest.resolveone(uml::StructuredClassifier).ownedAttribute += self.resolveoneIn(Connector::mapSourceToProperty))
		else (ownedEnd += self.resolveoneIn(Connector::mapSourceToProperty))
	endif;
	if (self.DestIsNavigable)
		then (self.Source.resolveone(uml::StructuredClassifier).ownedAttribute += self.resolveoneIn(Connector::mapDestToProperty))
		else (ownedEnd += self.resolveoneIn(Connector::mapDestToProperty))
	endif;
}

//for more properties the semikolon seperated lists SourceStyle and DestSystle need to be parsed
mapping Connector::mapSourceToProperty() : uml::Property
merges Connector::mapSourceToPropertyMultiplicities
{
	//EA uses the aggregation property the other way round
	aggregation := self.DestIsAggregate.transformAssociationType();
	name := self.SourceRole;
	
	type := self.Source.late resolveone(uml::Classifier);

}

mapping Connector::mapSourceToPropertyMultiplicities() : uml::Property
when {self.getSourceLower() != null and self.getSourceLower() != 1 or self.getSourceUpper() != null and self.getSourceLower() != 1}
{
	lower := self.getSourceLower();
	upper := self.getSourceUpper();
}

mapping Connector::mapDestToProperty() : uml::Property
merges Connector::mapDestToPropertyMultiplicities
{
	//EA uses the aggregation property the other way round
	aggregation := self.SourceIsAggregate.transformAssociationType();
	name := self.DestRole;
	type := self.Dest.late resolveone(uml::Classifier);
}

mapping Connector::mapDestToPropertyMultiplicities() : uml::Property
when {self.getDestLower() != null and self.getDestLower() != 1 or self.getDestUpper() != null and self.getDestUpper() != 1}
{
	lower := self.getDestLower();
	upper := self.getDestUpper();
}

query IsAggregate::transformAssociationType() : uml::AggregationKind
{
	return switch {
		case (self = IsAggregate::False) AggregationKind::none;
		case (self = IsAggregate::Aggregation) AggregationKind::shared;
		case (self = IsAggregate::Composition) AggregationKind::composite;
		else assert error (false) with log("Illegal enum value");
	};
}

mapping Method::transformOperations() :  Operation
{
	name := self.Name;
	ownedParameter := self.Parameters -> map transformParameters();
	ownedParameter += self.ReturnType.map TypeReferenceToParamter();
	visibility := self.Visibility.getAttributeType();
	
}
mapping Methodparameter::transformParameters() :  uml::Parameter
merges Methodparameter::transformParameterPrimitive, Methodparameter::transformParameterClassifier
{
	name := self.Name;
	direction := ParameterDirectionKind::_in;	
}

mapping Methodparameter::transformParameterPrimitive() :  uml::Parameter
when {self.ParameterType.classifier != null}
{
	type := self.ParameterType.getPrimitiveType().transformPrimitive();
}

mapping Methodparameter::transformParameterClassifier() :  uml::Parameter
when {self.ParameterType.classifier != null}
{
	type := self.ParameterType.classifier.late resolveone(uml::Classifier);
}

mapping TypeReference::TypeReferenceToParamter() : uml::Parameter
merges TypeReference::TypeReferenceToParamterClassifier, TypeReference::TypeReferenceToParamterPrimitive
{
	direction := ParameterDirectionKind::_return;
}

mapping TypeReference::TypeReferenceToParamterClassifier() : uml::Parameter
when {self.classifier != null}
{
	type := self.classifier.late resolveone(uml::Classifier)
}

mapping TypeReference::TypeReferenceToParamterPrimitive() : uml::Parameter
when {self.classifier = null}
{
	type := self.getPrimitiveType().transformPrimitive() 
}

// queries for transformation to uml

query PrimitiveType::transformPrimitive() : uml::PrimitiveType
{
	var type = switch {
		case (self = PrimitiveType::Int) getPrimitive('EInt');
		case (self = PrimitiveType::Boolean) getPrimitive('EBoolean');
		case (self = PrimitiveType::Byte) getPrimitive('EByte');
		case (self = PrimitiveType::Char) getPrimitive('EChar');
		case (self = PrimitiveType::Double) getPrimitive('EDouble');
		case (self = PrimitiveType::Float) getPrimitive('EFloat');
		case (self = PrimitiveType::Long) getPrimitive('ELong');
		case (self = PrimitiveType::Short) getPrimitive('EShort');
		case (self = PrimitiveType::String) getPrimitive('EString');
	};
	assert warning (type <> null) with log ('Could not interpret primitive datatype \"' + self.toString() + '\".');
	return type;
}

query getPrimitive(typeName : String) : uml::PrimitiveType
{
	var model := ecorePrimitives.rootObjects()[uml::Model]->any(true);
	var primitives := model.ownedElement->selectByType(uml::PrimitiveType);
	return primitives->any(typeName = name);
}

query Scope::getAttributeType() : VisibilityKind
{
 return switch {
		case (self = Scope::Private)  VisibilityKind::private; 
		case (self = Scope::Public) VisibilityKind::public;
		case (self = Scope::Package) VisibilityKind::package;
		case (self = Scope::Protected) VisibilityKind::protected;
		else assert error (false) with log("Illegal enum value");
	};
}

query eaobjectmodel::Package::getAssociatedElement() : eaobjectmodel::Element {
	return om.objectsOfType(eaobjectmodel::Element)->select(e | e.PDATA1 = self)->any(true);
}

//Diagram
mapping Diagram::diagramToDiagram() : notation::Diagram {
	type := "PapyrusUMLClassDiagram";
	name := self.Name;
	measurementUnit := notation::MeasurementUnit::Pixel;
	
	var package := self.Package.resolveone(uml::Package);
	element := package.toEObject();
	
	var directChildren = self.DiagramObjects->sortedBy(_Sequence)->reverse()->select(d: DiagramObject | d.Element.Package = self.Package);
	
	children += directChildren-> map diagramObjectToShape();
	
	edges += self.DiagramLinks-> map diagramLinkToConnector();
	
	styles += self.map stringValueStyle();
	styles += self.map diagramStyle();
	styles += self.map papyrusViewStyle(package);
}

//Shapes
mapping DiagramObject::diagramObjectToShape() : Shape
merges DiagramObject::packageToShape, DiagramObject::classToShape, DiagramObject::interfaceToShape, DiagramObject::commentToShape {
	element := self.Element.resolveone(uml::Element).toEObject();
	layoutConstraint := self.map diagramObjectToLayoutConstraint();
}

mapping DiagramObject::packageToShape() : Shape 
when {self.Element.Type = ElementType::Package} {
	element := self.Element.PDATA1.resolveone(uml::Package).toEObject();
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_PACKAGE_REGULAR);
	children += self.map diagramObjectToNameDecorationNode();
	
	children += self.map packageToCompartment();
}

mapping DiagramObject::classToShape() : Shape 
when {self.Element.Type = ElementType::Class} {
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_CLASS_REGULAR);
	children += self.map diagramObjectToNameDecorationNode();	
	children += self.map diagramObjectToFloatingLabelDecorationNode();
	children += self.map diagramObjectToAttributesCompartment();
	children += self.map diagramObjectToOperationsCompartment();
	children += self.map diagramObjectToSignalsCompartment();	
}

mapping DiagramObject::interfaceToShape() : Shape
when {self.Element.Type = ElementType::Interface} {
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_INTERFACE_REGULAR);
	children += self.map diagramObjectToNameDecorationNode();
	children += self.map diagramObjectToFloatingLabelDecorationNode();	
	children += self.map diagramObjectToAttributesCompartment();
	children += self.map diagramObjectToOperationsCompartment();
	children += self.map diagramObjectToSignalsCompartment();
}

mapping DiagramObject::commentToShape() : Shape
when {self.Element.Type = ElementType::Note} {
	type := self.getNestedName(PAPYRUS_NOTATION_SHAPE_COMMENT_REGULAR);
	
	children += self.map diagramObjectToLabelBodyHintDecoration();
}


//CommentDecorationNode
mapping DiagramObject::diagramObjectToLabelBodyHintDecoration() : notation::DecorationNode
{
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_COMMENT_BODY_REGULAR);
}

//NameDecorationNode
mapping DiagramObject::diagramObjectToNameDecorationNode() : DecorationNode
merges DiagramObject::packageToNameDecorationNode, DiagramObject::classToNameDecorationNode, DiagramObject::interfaceToNameDecorationNode {
}

mapping DiagramObject::packageToNameDecorationNode() : DecorationNode 
when {self.Element.Type = ElementType::Package} {
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_PACKAGE_NAME_REGULAR);
}

mapping DiagramObject::classToNameDecorationNode() : DecorationNode 
when {self.Element.Type = ElementType::Class} {
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_CLASS_NAME_REGULAR);
}

mapping DiagramObject::interfaceToNameDecorationNode() : DecorationNode 
when {self.Element.Type = ElementType::Interface} {
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_INTERFACE_NAME_REGULAR);
}

mapping DiagramLink::diagramLinkToNameDecorationNode() : DecorationNode
disjuncts DiagramLink::diagramLinkToNameDecorationNodeInterfaceRealization;

mapping DiagramLink::diagramLinkToNameDecorationNodeInterfaceRealization() : DecorationNode
when {self.Connector.Type = ConnectorType::Realisation}
{
	type := PAPYRUS_NOTATION_NODE_INTERFACEREALIZATION_NAME;
	styles += result.toEObject().map booleanValueStyle();
	layoutConstraint := result.toEObject().map locationConstraint();
}

//LayoutConstraint
mapping DiagramObject::diagramObjectToLayoutConstraint() : Bounds {
	width := self.Right - self.Left;
	height := (self.Bottom - self.Top) * -1;
	x := self.Left - self.getPackageLeft();
	y := (self.Top - self.getPackageTop()) * -1;
}

//FloatingLabelDecorationNode
mapping DiagramObject::diagramObjectToFloatingLabelDecorationNode() : DecorationNode
merges DiagramObject::classToFloatingLabelDecorationNode, DiagramObject::interfaceToFloatingLabelDecorationNode {
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping DiagramObject::classToFloatingLabelDecorationNode() : DecorationNode 
when {self.Element.Type = ElementType::Class} {
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_CLASS_FLOATINGLABEL_REGULAR);
}

mapping DiagramObject::interfaceToFloatingLabelDecorationNode() : DecorationNode 
when {self.Element.Type = ElementType::Interface} {
	type := self.getNestedName(PAPYRUS_NOTATION_NODE_INTERFACE_FLOATINGLABEL_REGULAR);
}

//PackageCompartment
mapping DiagramObject::packageToCompartment() : notation::BasicCompartment
{
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_PACKAGE_PACKAGEABLE_REGULAR);
	styles += result.toEObject().map titleStyle();
	layoutConstraint := result.toEObject().map notationBounds();
	
	var directChildren = self.Diagram.DiagramObjects->sortedBy(_Sequence)->reverse()->select(d: DiagramObject | d.Element.Package = self.Element.PDATA1);
	children += directChildren->map diagramObjectToShape();
}

//AttributeCompartment
mapping DiagramObject::diagramObjectToAttributesCompartment() : BasicCompartment
merges DiagramObject::classToAttributesCompartment, DiagramObject::interfaceToAttributesCompartment {
	children += self.Element.Attributes-> map attributeToShape();
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping DiagramObject::classToAttributesCompartment() : BasicCompartment
when {self.Element.Type = ElementType::Class} {
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_CLASS_PROPERTIES_REGULAR);
}

mapping DiagramObject::interfaceToAttributesCompartment() : BasicCompartment
when {self.Element.Type = ElementType::Interface} {
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_PROPERTIES_REGULAR);
}

//Attribute
mapping Attribute::attributeToShape() : Shape
merges Attribute::classAttributeToShape, Attribute::interfaceAttributeToShape {
	element := self.resolveone(uml::Property).toEObject();
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping Attribute::classAttributeToShape() : Shape
when {self.Parent.Type = ElementType::Class} {	
	type := PAPYRUS_NOTATION_SHAPE_CLASS_ATTRIBUTE;
}

mapping Attribute::interfaceAttributeToShape() : Shape
when {self.Parent.Type = ElementType::Interface} {	
	type := PAPYRUS_NOTATION_SHAPE_INTERFACE_ATTRIBUTE;
}

//MethodCompartment
mapping DiagramObject::diagramObjectToOperationsCompartment() : BasicCompartment
merges DiagramObject::classToOperationsCompartment, DiagramObject::interfaceToOperationsCompartment {
	children += self.Element.Methods-> methodToShape();
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping DiagramObject::classToOperationsCompartment() : BasicCompartment
when {self.Element.Type = ElementType::Class} {
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_CLASS_OPERATIONS_REGULAR);
}

mapping DiagramObject::interfaceToOperationsCompartment() : BasicCompartment
when {self.Element.Type = ElementType::Interface} {
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_OPERATIONS_REGULAR);
}

//Method !Does not need nested postfix!
mapping Method::methodToShape() : Shape
merges Method::classMethodToShape, Method::interfaceMethodToShape {
	element := self.resolveone(uml::Operation).toEObject();
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping Method::classMethodToShape() : Shape
when {self.Parent.Type = ElementType::Class} {	
	type := PAPYRUS_NOTATION_SHAPE_CLASS_OPERATION
}

mapping Method::interfaceMethodToShape() : Shape
when {self.Parent.Type = ElementType::Interface} {	
	type := PAPYRUS_NOTATION_SHAPE_INTERFACE_OPERATION;
}

//SignalCompartment
mapping DiagramObject::diagramObjectToSignalsCompartment() : notation::BasicCompartment
merges DiagramObject::classToSignalsCompartment, DiagramObject::interfaceToSignalsCompartment
{
	styles += result.toEObject().map titleStyle();
	styles += result.toEObject().map sortingStyle();
	styles += result.toEObject().map filteringStyle();
	layoutConstraint := result.toEObject().map notationBounds();
}

mapping DiagramObject::classToSignalsCompartment() : notation::BasicCompartment
when {self.Element.Type = ElementType::Class} {
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_CLASS_NESTED_REGULAR);
}

mapping DiagramObject::interfaceToSignalsCompartment() : notation::BasicCompartment
when {self.Element.Type = ElementType::Interface} {
	type := self.getNestedName(PAPYRUS_NOTATION_COMPARTMENT_INTERFACE_NESTED_REGULAR);
}

//Connectors
mapping DiagramLink::diagramLinkToConnector() : notation::Connector
merges DiagramLink::associationToConnector, DiagramLink::generalizationToConnector, DiagramLink::implementationToConnector, DiagramLink::noteLinkToConnector, DiagramLink::packageImportToConnector
{
	source := self.Connector.Source.resolveElement(self.Diagram);
	target := self.Connector.Dest.resolveElement(self.Diagram);
	targetAnchor := self.map diagramLinkToTargetAnchor();
	sourceAnchor := self.map diagramLinkToSourceAnchor();

	bendpoints := result.map connectorToBendpoint();
	styles += result.toEObject().map fontStyle();
}

mapping DiagramLink::associationToConnector() : notation::Connector
when {self.Connector.Type = ConnectorType::Association or self.Connector.Type = ConnectorType::Aggregation} {
	type := PAPYRUS_NOTATION_EDGE_ASSOCIATION;
	element := self.Connector.resolveoneIn(Connector::mapConnectorToAssociation).toEObject();
	
	//switcheroo needed for some reason
	//checked with the test model
	source := self.Connector.Dest.resolveElement(self.Diagram);
	target := self.Connector.Source.resolveElement(self.Diagram);
	var anchor := targetAnchor;
	targetAnchor := sourceAnchor;
	sourceAnchor := anchor;
	
	children += self.map diagramLinkToStereotypeDecoration();
	children += self.map diagramLinkToNameDecoration();
	children += self.map diagramLinkToTargetRoleDecoration();
	children += self.map diagramLinkToSourceRoleDecoration();
	children += self.map diagramLinkToSourceMultiplicityDecoration();
	children += self.map diagramLinkToTargetMultiplicityDecoration();
}

mapping DiagramLink::generalizationToConnector() : notation::Connector
when {self.Connector.Type = ConnectorType::Generalization} {
	type := PAPYRUS_NOTATION_EDGE_GENERALIZATION;
	element := self.Connector.resolveoneIn(Connector::mapConnectoToGeneralization).toEObject();
	children := self.map diagramLinkToStereotypeDecorationNode();
}

mapping DiagramLink::implementationToConnector() : notation::Connector
when {self.Connector.Type = ConnectorType::Realisation} {
	type := PAPYRUS_NOTATION_EDGE_IMPLEMENTATION;
	element := self.Connector.resolveoneIn(Connector::mapConnectoToRealization).toEObject();
	children := self.map diagramLinkToStereotypeDecorationNode();
	children += self.map diagramLinkToNameDecorationNode()
}

mapping DiagramLink::noteLinkToConnector() : notation::Connector
when {self.Connector.Type = ConnectorType::NoteLink} {
	type := PAPYRUS_NOTATION_EDGE_COMMENTLINK;
}

mapping DiagramLink::packageImportToConnector() : notation::Connector 
when {self.Connector.Type = ConnectorType::Package and self.Connector.Stereotype = "import"} {
	type := PAPYRUS_NOTATION_EDGE_PACKAGEIMPORT;
	element := self.Connector.resolveoneIn(Connector::mapConnectorToPackageImport).toEObject();
	children := self.map diagramLinkToStereotypeDecorationNode();
}

//ConnectorStereotypeDecorationNode
mapping DiagramLink::diagramLinkToStereotypeDecoration() : DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_STEREOTYPE;
	layoutConstraint := result.toEObject().map locationConstraint();
	styles += result.toEObject().map booleanValueStyle();
}

//ConnectorNameDecorationNode
mapping DiagramLink::diagramLinkToNameDecoration() : DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_NAME;
	layoutConstraint := result.toEObject().map locationConstraint();
	styles += result.toEObject().map booleanValueStyle();
}

//RoleDecorationNode
mapping DiagramLink::diagramLinkToTargetRoleDecoration() : DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_TARGETROLE;
	layoutConstraint := result.toEObject().map locationConstraint();
	styles += result.toEObject().map booleanValueStyle();
}

mapping DiagramLink::diagramLinkToSourceRoleDecoration() : DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_SOURCEROLE;
	layoutConstraint := result.toEObject().map locationConstraint();
	styles += result.toEObject().map booleanValueStyle();
}

//MultiplicityDecorationNode
mapping DiagramLink::diagramLinkToTargetMultiplicityDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_TARGETMULTIPLICITY;
	layoutConstraint := result.toEObject().map locationConstraint();
	styles += result.toEObject().map booleanValueStyle();
}

mapping DiagramLink::diagramLinkToSourceMultiplicityDecoration() : notation::DecorationNode
{
	type := PAPYRUS_NOTATION_NODE_ASSOCIATION_SOURCEMULTIPLICITY;
	layoutConstraint := result.toEObject().map locationConstraint();
	styles += result.toEObject().map booleanValueStyle();
}

//Anchors
mapping DiagramLink::diagramLinkToSourceAnchor() : notation::IdentityAnchor {
	var bounds := self.Connector.Source.resolveElement(self.Diagram).layoutConstraint.oclAsType(notation::Bounds);
	var xPos := (self.SX + bounds.width / 2) / bounds.width;
	var yPos := (self.SY * -1 + bounds.height / 2) / bounds.height;
	id := "(" + xPos.toString() + "," + yPos.toString() + ")";
}

mapping DiagramLink::diagramLinkToTargetAnchor() : notation::IdentityAnchor {
	var bounds := self.Connector.Dest.resolveElement(self.Diagram).layoutConstraint.oclAsType(notation::Bounds);
	var xPos := (self.EX + bounds.width / 2) / bounds.width;
	var yPos := (self.EY * -1 + bounds.height / 2) / bounds.height;
	id := "(" + xPos.toString() + "," + yPos.toString() + ")";
}



mapping DiagramLink::diagramLinkToStereotypeDecorationNode() : DecorationNode
merges	DiagramLink::diagramLinkToStereotypeDecorationNodeGeneralization,
		DiagramLink::diagramLinkToStereotypeDecorationNodeInterfaceRealization,
		DiagramLink::diagramLinkToStereotypeDecorationNodePackageImport
{
	layoutConstraint := result.toEObject().map locationConstraint();
}

mapping DiagramLink::diagramLinkToStereotypeDecorationNodeGeneralization() : DecorationNode
when {self.Connector.Type = ConnectorType::Generalization}
{
	type := PAPYRUS_NOTATION_NODE_GENERALIZATION_STEREOTYPE;
	styles += result.toEObject().map booleanValueStyle();
}

mapping DiagramLink::diagramLinkToStereotypeDecorationNodeInterfaceRealization() : DecorationNode
when {self.Connector.Type = ConnectorType::Realisation}
{
	type := PAPYRUS_NOTATION_NODE_INTERFACEREALIZATION_STEREOTYPE;
	styles += result.toEObject().map booleanValueStyle();
}

mapping DiagramLink::diagramLinkToStereotypeDecorationNodePackageImport() : DecorationNode
when {self.Connector.Type = ConnectorType::Package and self.Connector.Stereotype = "import"}
{
	type := PAPYRUS_NOTATION_NODE_PACKAGEIMPORT_STEREOTYPE
}

//Queries
query DiagramObject::getNestedName(name : String) : String {
	if (self.Diagram.Package = self.Element.Package)
		then return name
		else return name + "_CN"
	endif	
}

query eaobjectmodel::Element::findCommentedUMLElement() : uml::Element
{
	return if self.PDATA1 = null
		then self.resolveone(uml::Element)
		else self.PDATA1.resolveone(uml::Element)
	endif; 
}

// om.objectsOfType allowed here because it's used for finding a specific entity'
query DiagramObject::getPackageLeft() : Integer {
	var package := om.objectsOfType(DiagramObject)->any(p: DiagramObject | p.Diagram = self.Diagram and p.Element.PDATA1 = self.Element.Package);
	if (package.oclIsUndefined())
		then return 0
		else return package.Left
	endif;
}

query DiagramObject::getPackageTop() : Integer {
	var package := om.objectsOfType(DiagramObject)->any(p: DiagramObject | p.Diagram = self.Diagram and p.Element.PDATA1 = self.Element.Package);
	if (package.oclIsUndefined())
		then return 0
		else return package.Top
	endif;
}

query Element::resolveElement(dia : eaobjectmodel::Diagram) : notation::Shape {
	var diaObj = om.objectsOfType(DiagramObject)->any(diaObj: DiagramObject| diaObj.Diagram = dia and diaObj.Element = self);
	assert fatal (not diaObj.oclIsUndefined());
	return diaObj.resolveoneIn(DiagramObject::diagramObjectToShape);
}

//Style stuff
mapping eaobjectmodel::Diagram::stringValueStyle() : notation::StringValueStyle
{
	name := "diagram_compatibility_version";
	stringValue := "1.3.0";	
}

mapping eaobjectmodel::Diagram::diagramStyle() : notation::DiagramStyle
{	
}

mapping eaobjectmodel::Diagram::papyrusViewStyle(rootElement : uml::Package) : style::PapyrusDiagramStyle
{
	owner := rootElement.toEObject();
	diagramKindId := "org.eclipse.papyrus.uml.diagram.class";
}
