package de.cooperateproject.eabridge.eaobjectmodel.xcore

//associated with t_attribute table in .eap file
class Attribute {
	//	String	Alias //	Read/Write OPTIONAL
	//	
	//	Contains the (optional) Alias property for this attribute. This can be used interchangeably with the Style attribute, below.
	//	
	//	
	Boolean	AllowDuplicates //	Read/Write
	//	
	//	Indicates if duplicates are allowed in the collection. 
	//	
	//	If the attribute represents a database column this, when set, represents the Not Null option.
	//	
	//	
	String	AttributeGUID //	Read only
	//	
	//	A globally unique ID for the current attribute. This attribute is system generated.
	//	
	//	
	Long	AttributeID //	Read only
	//	
	//	The local ID number of the attribute.
	//	
	//	
	String Classifier //	Read/Write FOREIGN KEY AS STRING OTHERWISE 0
	//	
	//	The classifier ID, if appropriate, indicating the base type associated with the attribute, if not a primitive type.
	//	
	//	
	String	Container //	Read/Write
	//	
	//	The container type.
	//	
	//	
	String	Containment //	Read/Write
	//	
	//	The type of containment - Not Specified, By Reference or By Value.
	//	
	//	
	contains AttributeConstraint[] Constraints opposite Attribute //	Read only
	//	
	//	A collection of AttributeConstraint objects, used to access and manage constraints associated with this attribute.
	//	
	//	
	String	Default //	Read/Write
	//	
	//	The initial value assigned to this attribute.
	//	
	//	
	Boolean	IsCollection //	Read/Write
	//	
	//	Indicates if the current feature is a collection or not. If the attribute represents a database column this, when set, represents a Foreign Key.
	//	
	//	
	Boolean	IsConst //	Read/Write
	//	
	//	A flag indicating if the attribute is Const or not.
	//	
	//	
	Boolean	IsDerived //	Read/Write
	//	
	//	Indicates if the attribute is derived (that is, a calculated value).
	//	
	//	
	Boolean	IsID //	Read/Write
	//	
	//	Indicates if the attribute uniquely identifies an instance of the containing Class, or not. 
	//	
	//	
	Boolean	IsOrdered //	Read/Write
	//	
	//	Indicates if a collection is ordered or not. If the attribute represents a database column this, when set, represents a Primary Key.
	//	
	//	
	Boolean	IsStatic //	Read/Write
	//	
	//	Indicates if the current attribute is a static feature or not. If the attribute represents a database column this, when set, represents the Unique option.
	//	
	//	
	String	Length //	Read/Write
	//	
	//	The attribute length, where applicable.
	//	
	//	
	String	LowerBound //	Read/Write
	//	
	//	A value for the collection lower boundary.
	//	
	//	
	String	Name //	Read/Write
	//	
	//	The attribute name.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Further notes on this attribute.
	//	
	//	
	//ObjectType	ObjectType	//	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	Long	Pos //	Read/Write
	//	
	//	The position of the attribute in the Class attribute list.
	//	
	//	
	String	Precision //	Read/Write
	//	
	//	The precision value.
	//	
	//	
	String	RedefinedProperty //	Read/Write
	//	
	//	Corresponds to the Redefined Property field on the Detail page of the attribute Properties dialog, or the UML redefinedProperty attribute. 
	//	
	//	Contains a comma separated list of GUIDs.
	//	
	//	
	String	Scale //	Read/Write
	//	
	//	The scale value.
	//	
	//	
	String	Stereotype //	Read/Write
	//	
	//	Sets or gets the stereotype for this attribute.
	//	
	//	
	//String	StereotypeEx //	Read/Write DERIVED ATTRIBUTE
	//	
	//	Provides all the applied stereotypes of the attribute, in a comma-separated list.
	//	
	//	
	String	Style //	Read/Write
	//	
	//	Contains the (optional) Alias property for this attribute. This can be used interchangeably with the Alias attribute, above.
	//	
	//	
	//String	SubsettedProperty //	Read/Write UNCLEAR IF NEEDED
	//	
	//	Corresponds to the Subsetted Property field on the Detail page of the attribute Properties dialog, or the UML subsettedProperty attribute. 
	//	
	//	Contains a comma separated list of GUIDs.
	//	
	//	
	String	StyleEx //	Read/Write
	//	
	//	Advanced style settings, reserved for the use of Sparx Systems.
	//	
	//	
	contains AttributeTag[] TaggedValues opposite Attribute //	Read only
	//	
	//	A collection of AttributeTag objects, used to access and manage Tagged Values associated with this attribute.
	//
	//contains AttributeTag[] TaggedValuesEx //	Read only DERIVED ATTRIBUTE
	//	
	//	A collection of TaggedValue objects belonging to the current attribute and the TaggedValuesEx property of its classifier.
	//
	String	Type //	Read/Write
	//	
	//	The attribute type (by name; also see ClassifierID).
	//	
	//	
	String	UpperBound //	Read/Write
	//	
	//	A value for the collection upper boundary.
	//	
	//	
	String	Visibility //	Read/Write
//	
//	Identifies the scope of the attribute - Private, Protected, Public or Package.
}

//associated with t_attribute table in .eap file
class AttributeConstraint {
	container Attribute Attribute opposite Constraints //	Read/Write
	//	
	//	The ID of the attribute this constraint applies to.
	//	
	//	
	String	Constraint // Added due do it being in the database and a major feature of a constraint
	//	
	//	The Constraint information
	//	
	String	AttName //	Read/Write
	//	
	//	The name of the constraint.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Descriptive notes about the constraint.
	//	
	//	
	//ObjectType	ObjectType //	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	String	Type //	Read/Write
//	
//	The type of constraint.
}


//associated with t_attributetag table in .eap file
class AttributeTag {
	container Attribute Attribute opposite TaggedValues //	Read/Write
	//	
	//	The local ID of the attribute associated with this Tagged Value.
	//	
	//	
	String	Name //	Read/Write
	//	
	//	The name of the tag.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Further descriptive notes about this tag. 
	//	
	//	If Value (below) is set to "<memo>", then Notes should contain the actual Tagged Value content.
	//	
	//	
	//ObjectType	ObjectType //	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	String	TagGUID //	Read/Write
	//	
	//	A globally unique ID for this Tagged Value.
	//	
	//	
	Long	TagID //	Read only
	//	
	//	The local ID to identify the Tagged Value.
	//	
	//	
	String	Value //	Read/Write
//	
//	The value assigned to this tag.
//	
//	This field has a 255 character limit. If the value is greater than 255 characters long, set the value to "<memo>" and insert the body of text in the Notes attribute (above). 
//
//	When reading existing Tagged Values, if Value = "<memo>" then the developer should read the actual body of text from the Notes attribute.
}

