package de.cooperateproject.eabridge.eaobjectmodel.xcore

//associated with t_attribute table in .eap file
class Attribute {
	//	String	Alias //	Read/Write OPTIONAL
	//	
	//	Contains the (optional) Alias property for this attribute. This can be used interchangeably with the Style attribute, below.
	//	
	//	
	Boolean	AllowDuplicates //	Read/Write
	//	
	//	Indicates if duplicates are allowed in the collection. 
	//	
	//	If the attribute represents a database column this, when set, represents the Not Null option.
	//	
	//	
	String	AttributeGUID //	Read only
	//	
	//	A globally unique ID for the current attribute. This attribute is system generated.
	//	
	//	
	Long	AttributeID //	Read only
	//	
	//	The local ID number of the attribute.
	//	
	//	
	String Classifier //	Read/Write FOREIGN KEY AS STRING OTHERWISE 0
	//	
	//	The classifier ID, if appropriate, indicating the base type associated with the attribute, if not a primitive type.
	//	
	//	
	String	Container //	Read/Write
	//	
	//	The container type.
	//	
	//	
	String	Containment //	Read/Write
	//	
	//	The type of containment - Not Specified, By Reference or By Value.
	//	
	//	
	contains AttributeConstraint[] Constraints opposite Attribute //	Read only
	//	
	//	A collection of AttributeConstraint objects, used to access and manage constraints associated with this attribute.
	//	
	//	
	String	Default //	Read/Write
	//	
	//	The initial value assigned to this attribute.
	//	
	//	
	Boolean	IsCollection //	Read/Write
	//	
	//	Indicates if the current feature is a collection or not. If the attribute represents a database column this, when set, represents a Foreign Key.
	//	
	//	
	Boolean	IsConst //	Read/Write
	//	
	//	A flag indicating if the attribute is Const or not.
	//	
	//	
	Boolean	IsDerived //	Read/Write
	//	
	//	Indicates if the attribute is derived (that is, a calculated value).
	//	
	//	
	Boolean	IsOrdered //	Read/Write
	//	
	//	Indicates if a collection is ordered or not. If the attribute represents a database column this, when set, represents a Primary Key.
	//	
	//	
	Boolean	IsStatic //	Read/Write
	//	
	//	Indicates if the current attribute is a static feature or not. If the attribute represents a database column this, when set, represents the Unique option.
	//	
	//	
	String	Length //	Read/Write
	//	
	//	The attribute length, where applicable.
	//	
	//	
	String	LowerBound //	Read/Write
	//	
	//	A value for the collection lower boundary.
	//	
	//	
	String	Name //	Read/Write
	//	
	//	The attribute name.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Further notes on this attribute.
	//	
	//	
	//ObjectType	ObjectType	//	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	container Element Parent opposite Attributes //	Read only
	//	
	//	Returns the ElementID of the element that this attribute is a part of.
	//	
	//	
	Long	Pos //	Read/Write
	//	
	//	The position of the attribute in the Class attribute list.
	//	
	//	
	String	Precision //	Read/Write
	//	
	//	The precision value.
	//	
	//	
	String	Scale //	Read/Write
	//	
	//	The scale value.
	//	
	//	
	String	Stereotype //	Read/Write
	//	
	//	Sets or gets the stereotype for this attribute.
	//	
	//	
	//String	StereotypeEx //	Read/Write DERIVED ATTRIBUTE
	//	
	//	Provides all the applied stereotypes of the attribute, in a comma-separated list.
	//	
	//	
	String	Style //	Read/Write
	//	
	//	Contains the (optional) Alias property for this attribute. This can be used interchangeably with the Alias attribute, above.
	//	
	//	
	//String	SubsettedProperty //	Read/Write UNCLEAR IF NEEDED
	//	
	//	Corresponds to the Subsetted Property field on the Detail page of the attribute Properties dialog, or the UML subsettedProperty attribute. 
	//	
	//	Contains a comma separated list of GUIDs.
	//	
	//	
	String	StyleEx //	Read/Write
	//	
	//	Advanced style settings, reserved for the use of Sparx Systems.
	//	
	//	
	contains AttributeTag[] TaggedValues opposite Attribute //	Read only
	//	
	//	A collection of AttributeTag objects, used to access and manage Tagged Values associated with this attribute.
	//
	//contains AttributeTag[] TaggedValuesEx //	Read only DERIVED ATTRIBUTE
	//	
	//	A collection of TaggedValue objects belonging to the current attribute and the TaggedValuesEx property of its classifier.
	//
	String	Type //	Read/Write
	//	
	//	The attribute type (by name; also see ClassifierID).
	//	
	//	
	String	UpperBound //	Read/Write
	//	
	//	A value for the collection upper boundary.
	//	
	//	
	String	Scope //	Read/Write
//	
//	Identifies the scope of the attribute - Private, Protected, Public or Package.
	String GenOption
}

//associated with t_attribute table in .eap file
class AttributeConstraint {
	refers Element ElementOfAttribute // Added due it being in the database and needed by EA 
	//
	//  The Element of the Attribute of this Constraint 
	//  Needs to be set
	//
	container Attribute Attribute opposite Constraints //	Read/Write
	//	
	//	The ID of the attribute this constraint applies to.
	//	
	//	
	String	Constraint // Added due do it being in the database and a major feature of a constraint
	//	
	//	The Constraint information
	//	
	String	AttName //	Read/Write
	//	
	//	The name of the constraint.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Descriptive notes about the constraint.
	//	
	//	
	//ObjectType	ObjectType //	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	String	Type //	Read/Write
//	
//	The type of constraint.
}


//associated with t_attributetag table in .eap file
class AttributeTag {
	container Attribute Attribute opposite TaggedValues //	Read/Write
	//	
	//	The local ID of the attribute associated with this Tagged Value.
	//	
	//	
	String	Name //	Read/Write
	//	
	//	The name of the tag.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Further descriptive notes about this tag. 
	//	
	//	If Value (below) is set to "<memo>", then Notes should contain the actual Tagged Value content.
	//	
	//	
	//ObjectType	ObjectType //	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	String	TagGUID //	Read/Write
	//	
	//	A globally unique ID for this Tagged Value.
	//	
	//	
	Long	TagID //	Read only
	//	
	//	The local ID to identify the Tagged Value.
	//	
	//	
	String	Value //	Read/Write
//	
//	The value assigned to this tag.
//	
//	This field has a 255 character limit. If the value is greater than 255 characters long, set the value to "<memo>" and insert the body of text in the Notes attribute (above). 
//
//	When reading existing Tagged Values, if Value = "<memo>" then the developer should read the actual body of text from the Notes attribute.
}

//associated with t_connector table in .eap file
class Connector {
//	String	Alias //	Read/Write		
	//			
	//	An optional alias for this connector.		
	//			
	//					
	//					
//	Long	Color //	Read/Write		
	//			
	//	Sets the color of the connector.		
	//			
	//			
	//Variant	ConnectorGUID	//	Read only		
	//			
	//	A system generated, globally unique ID for the current connector.		
	//			
	//			
	Long	ConnectorID //	Read only		
	//			
	//	A system generated local identifier for the current connector.		
	//			
	//			
//	contains ConnectorConstraint[]	Constraints	opposite Connector//	Read only
	//			
	//	A collection of constraint objects.
	//			
	//			
	//Collection	ConveyedItems	//	Read only
	//			
	//	Returns a collection of elements that have been conveyed.		
	//			
	//	To add another element to the conveyed Collection, use AddNew (ElementGUID,NULL); where ElementGUID is the GUID of the element to be added.		
	//			
	//			
	//Collection	CustomProperties	//	Read only
	//			
	//	Returns a collection of advanced properties associated with an element in the form of CustomProperty objects.
	//			
	//			
//	refers Diagram Diagram//	Read/Write	UNUSED BECAUSE IT IS NOT SHOWN IN THE EA OBJECT MODEL INSTEAD DIAGRAMLINK IS USED
	//			
	//	The DiagramID of the connector.		
	//			
	//			
	DirectionType Direction //	Read/Write
	//			
	//	The connector direction, which can be set to one of the following:		
	//			
	//	·	Unspecified	
	//	·	Bi-Directional	
	//	·	Source -> Destination	
	//	·	Destination -> Source	
	//			
	//			
	//			
	//	If the connector is non-navigable, set the sourceNavigability and/or targetNavigability attributes.		
	//			
	//			
	Long	PtEndX //	Read/Write		
	//			
	//	The x-coordinate of the connector's end point.		
	//			
	//	Connector end points are specified in Cartesian coordinates with the origin to the top left of the screen.		
	//			
	//			
	Long	PtEndY //	Read/Write		
	//			
	//	The y-coordinate of the connector's end point.		
	//			
	//	Connector end points are specified in Cartesian coordinates with the origin to the top left of the screen.		
	//			
	//			
	String	EventFlags //	Read/Write		
	//			
	//	A structure to hold a variety of flags concerned with event signaling on messages.		
	//			
	//			
	Boolean	IsLeaf //	Read/Write		
	//			
	//	A flag indicating that the connector is a leaf.		
	//			
	//			
	Boolean	IsRoot //	Read/Write		
	//			
	//	A flag indicating that the connector is a root.		
	//			
	//			
	Boolean	IsSpec //	Read/Write.		
	//			
	//	A flag indicating that the connector is a specification.		
	//			
	//			
	String	MetaType //	Read only		
	//			
	//	The connector's domain-specific meta type, as defined by an applied stereotype from an MDG Technology		
	//			
	//			
	String	MiscData //	Read only		
	//			
	//	This low-level property returns an array providing information about the contents of the PDatax fields; these database fields are not documented and developers must gain understanding of these fields through their own endeavors to use this property.		
	//			
	//	MiscData is zero based, therefore:		
	//			
	//	·	MiscData(0) corresponds to PData1	
	//	·	MiscData(1) corresponds to PData2, and so on	
	//			
	//			
	String	Name //	Read/Write		
	//			
	//	The connector name.		
	//			
	//			
	String	Notes //	Read/Write		
	//			
	//	Descriptive notes about the connector.		
	//			
	//			
	//ObjectType	ObjectType	//	Read only
	//			
	//	Distinguishes objects referenced through a Dispatch interface.		
	//			
	//			
	//Properties	Properties	//	Returns a list of specialized properties applicable to the connector that might not be available using the automation model.
	//			
	//	The properties are purposely undocumented because of their obscure nature and because they are subject to change as progressive enhancements are made to them.		
	//			
	//			
	Long	RouteStyle //	Read/Write		
	//			
	//	The route style.		
	//			
	//			
	Long	SeqNo //	Read/Write		
	//			
	//	The SequenceNo of the connector.		
	//			
	//			
	Long	PtStartX //	Read/Write		
	//			
	//	The x-coordinate of the connector's start point.		
	//			
	//	Connector end points are specified in Cartesian coordinates with the origin to the top left of the screen.		
	//			
	//			
	Long	PtStartY //	Read/Write		
	//			
	//	The y-coordinate of the connector's start point.		
	//			
	//	Connector end points are specified in Cartesian coordinates with the origin to the top left of the screen.		
	//			
	//		
	String	ActionFlags	
	String	StateFlags //	Read/Write		
	//			
	//	A structure to hold a variety of flags concerned with State signaling on messages; the list is delimited by semi-colons.		
	//			
	//			
	String	Stereotype //	Read/Write		
	//			
	//	Sets or gets the stereotype for this connector end.		
	//			
	//			
	//String	StereotypeEx //	Read/Write DERIVED ATTRIBUTE		
	//			
	//	All the applied stereotypes of the connector in a comma-separated list.		
	//			
	//			
	String	StyleEx //	Read/Write		
	//			
	//	Advanced style settings; reserved for the use of Sparx Systems.		
	//			
	//			
	String	SubType //	Read/Write		
	//			
	//	A possible subtype to refine the meaning of the connector.		
	//			
	//					
//	contains ConnectorTag TaggedValues opposite Connector //	Read only
	//			
	//	The collection of ConnectorTag objects.
	//			
	//			
	//Collection of type TemplateBinding	TemplateBindings	//	Read only
	//			
	//	A collection of TemplateBinding objects.
	//			
	//					
	ConnectorType	Type //	Read/Write		
	//			
	//	The connector type; valid types are held in the t_connectortypes table in the		
	//	.EAP file.		
	//			
	//			
	String	VirtualInheritance //	Read/Write		
	//			
	//	For Generalization, indicates if the inheritance is virtual.		
	//			
	//			
	refers Element Source
	
	refers Element Dest
	
	String SourceCard
	String SourceAccess
	String SourceElement
	String SourceRole
	String SourceRoleType
	String SourceRoleNote
	String SourceContainment
	boolean SourceIsAggregate
	boolean SourceIsOrdered
	String SourceQualifier
	String SourceChangeable
	String SourceConstraint
	String SourceIsNavigable
	String SourceStereotype
	String SourceStyle
	String SourceTS
	
	
	String DestCard
	String DestAccess
	String DestElement
	String DestRole
	String DestRoleType
	String DestRoleNote
	String DestContainment
	boolean DestIsAggregate
	boolean DestIsOrdered
	String DestQualifier
	String DestChangeable
	String DestConstraint
	String DestIsNavigable
	String DestStereotype
	String DestStyle
	String DestTS
	//
	String Top_Start_Label
	String Top_Mid_Label
	String Top_End_Label
	String Btm_StartLabel
	String Btm_MidLabel
	String Btm_EndLabel
	//
	int Start_Edge
	int End_Edge

	int HeadStyle
	int LineStyle
	
	String DispatchAction
	String PDATA1
	String PDATA2
	String PDATA3
	String PDATA4
	String PDATA5
	
}

//enum for the DirectionType
enum DirectionType {
	Unspecified	as "Unspecified"
	BiDirectional as "Bi-Directional"
	SourceDestination as "Source -> Destination"
	DestinationSource as "Destination -> Source"
}

//enum for the ConnectorType
enum ConnectorType {
	Connector_Type as "Connector_Type"
	Abstraction as "Abstraction"
	Aggregation as "Aggregation"
	Assembly as "Assembly"
	Association as "Association"
	Collaboration as "Collaboration"
	CommunicationPath as "CommunicationPath"
	Connector as "Connector"
	ControlFlow as "ControlFlow"
	Delegate as "Delegate"
	Dependency as "Dependency"
	Deployment as "Deployment"
	ERLink as "ERLink"
	Extension as "Extension"
	Generalization as "Generalization"
	InformationFlow as "InformationFlow"
	Instantiation as "Instantiation"
	InterruptFlow as "InterruptFlow"
	Manifest as "Manifest"
	Nesting as "Nesting"
	NoteLink as "NoteLink"
	ObjectFlow as "ObjectFlow"
	Package as "Package"
	ProtocolConformance as "ProtocolConformance"
	ProtocolTransition as "ProtocolTransition"
	Realisation as "Realisation"
	Sequence as "Sequence"
	StateFlow as "StateFlow"
	Substitution as "Substitution"
	Usage as "Usage"
	UseCase as "UseCase"
}

////associated with t_connectorconstraints table in .eap file UNUSED
//class ConnectorConstraint {
//	container Connector	Connector opposite Constraints//	Read/Write
//	//	
//	//	ID value of the Connector
//	//	
//	//	
//	String	Constraint //	Read/Write
//	//	
//	//	The constraint
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Notes about this constraint.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	Type //	Read/Write
////	
////	The constraint type.
////	
////	
//}

////associated with t_connectortag table in .eap file
//class ConnectorTag {
//	container Connector Connector opposite TaggedValues //	Read/Write
//	//	
//	//	The local ID of the associated connector.
//	//	
//	//	
////	String	FQName //	Read only
//	//	
//	//	The fully qualified name of the tag.
//	//	
//	//	
//	String	Property //	Read/Write
//	//	
//	//	The property.
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Further descriptive notes on this tag. 
//	//	
//	//	If Value (below) is set to "<memo>", then Notes should contain the actual Tagged Value content.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	TagGUID //	Read/Write
//	//	
//	//	A globally unique ID for this Tagged Value.
//	//	
//	//	
//	Long	TagID //	Read only
//	//	
//	//	A local ID to identify the Tagged Value.
//	//	
//	//	
//	String	Value //	Read/Write
////	
////	The value assigned to this tag.
////	
////	This field has a 255 character limit. If the value is greater than 255 characters long, set the value to "<memo>" and insert the body of text in the Notes attribute (above). 
////	
////	When reading existing Tagged Values, if Value = "<memo>" then the developer should read the actual body of text from the Notes attribute.
////	
////	
//}

////associated with t_diagram table in .eap file
//class Diagram {
//	String	Author //	Read/Write
//	//	
//	//	The name of the author.
//	//	
//	//	
//	Date	CreatedDate //	Read/Write
//	//	
//	//	The date the diagram was created.
//	//	
//	//	
//	Long	cx //	Read/Write
//	//	
//	//	The X dimension of the diagram (the default is 800).
//	//	
//	//	
//	Long	cy //	Read/Write
//	//	
//	//	The Y dimension of the diagram (the default is 1100).
//	//	
//	//	
//	//Variant	DiagramGUID	//	Read/Write
//	//	
//	//	A globally unique ID for this diagram.
//	//	
//	//	
//	Long	DiagramID //	Read only
//	//	
//	//	A local ID for the diagram.
//	//	
//	//	
//	contains DiagramLink[] DiagramLinks opposite Diagram //	Read only
//	//	
//	//	A list of DiagramLink objects, each containing information about the display characteristics of a connector in a diagram.
//	//	
//	//	
//	contains DiagrammObject[] DiagramObjects opposite Diagram //	Read only
//	//	
//	//	A collection of references to DiagramObjects. A DiagramObject is an instance of an element in a diagram, and includes size and display characteristics.
//	//	
//	//	
//	String	ExtendedStyle //	Read/Write
//	//	
//	//	An extended style attribute.
//	//	
//	//	
//	Boolean	HighlightImports //	Read/Write
//	//	
//	//	A flag to indicate that elements from other Packages should be highlighted.  Corresponds with the 'Show Namespace' option in the diagram properties dialog.
//	//	
//	//	
//	Boolean	IsLocked //	Read/Write
//	//	
//	//	A flag indicating whether this diagram is locked or not.
//	//	
//	//	
//	String	MetaType //	Read only
//	//	
//	//	The diagram's domain-specific meta type, as defined by an MDG Technology.
//	//	
//	//	
//	//Variant	ModifiedDate	//	Read/Write
//	//	
//	//	The date the diagram was last modified.
//	//	
//	//	
//	String	Name //	Read/Write
//	//	
//	//	The diagram name.
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Set or retrieve notes for this diagram.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	Orientation //	Read/Write
//	//	
//	//	The page orientation: P for Portrait or L for Landscape.
//	//	
//	//	
//	container Package Package opposite Diagrams //	Read/Write
//	//	
//	//	The ID of the Package that this diagram belongs to.
//	//	
//	//	
//	Long	PageHeight //	Read
//	//	
//	//	The number of pages high the diagram is.
//	//	
//	//	
//	Long	PageWidth //	Read
//	//	
//	//	The number of pages wide the diagram is.
//	//	
//	//	
//	Long	ParentID //	Read/Write
//	//	
//	//	The optional ID of an element that 'owns' this diagram; for example, a Sequence diagram owned by a Use Case.
//	//	
//	//	
//	Long	Scale //	Read/Write
//	//	
//	//	The zoom scale (the default is 100).
//	//	
//	//	
//	//Connector	SelectedConnector	//	Read/Write
//	//	
//	//	The currently selected connector on this diagram. Null if there is no currently selected diagram.
//	//	
//	//	
//	//Collection	SelectedObjects	//	Read only
//	//	
//	//	Gets a collection representing the currently selected elements on the diagram. 
//	//	
//	//	You can remove objects from this collection to deselect them, and add elements to the collection by passing the Object ID as a name to select them.
//	//	
//	//	
//	Long	ShowDetails //	Read/Write
//	//	
//	//	A flag to indicate that the Diagram Details text should be shown: 1 = Show, 0 = Hide.
//	//	
//	//	
//	Boolean	ShowPackageContents //	Read/Write
//	//	
//	//	A flag to indicate that the Package contents should be shown in the current diagram.
//	//	
//	//	
//	Boolean	ShowPrivate //	Read/Write
//	//	
//	//	A flag to show or hide Private features.
//	//	
//	//	
//	Boolean	ShowProtected //	Read/Write
//	//	
//	//	A flag to show or hide Protected features.
//	//	
//	//	
//	Boolean	ShowPublic //	Read/Write
//	//	
//	//	A flag to show or hide Public features.
//	//	
//	//	
//	String	Stereotype //	Read/Write
//	//	
//	//	Sets or gets the stereotype for this diagram.
//	//	
//	//	
//	String	StyleEx //	Read/Write
//	//	
//	//	Advanced style settings, reserved for the use of Sparx Systems.
//	//	
//	//	
//	String	Swimlanes //	Read/Write
//	//	
//	//	Information on swimlanes contained in the diagram. 
//	//	
//	//	Please note that this property is superseded by SwimlaneDef.
//	//	
//	//	
//	//SwimlaneDef	SwimlaneDef	//	Read/Write
//	//	
//	//	Information on swimlanes contained in the diagram.
//	//	
//	//	
//	String	Type //	Read only
//	//	
//	//	The diagram type; see the t_diagramtypes table in the .EAP file for more information.
//	//	
//	//	
//	String	Version //	Read/Write
////	
////	The version of the diagram.
////	
////	
//}
//
////associated with t_diagramlinks table in .eap file
//class DiagramLink {
//	contains Connector Connector //	Read/Write
//	//	
//	//	The ID of the associated connector.
//	//	
//	//	
//	container Diagram Diagram opposite DiagramLinks //	Read/Write
//	//	
//	//	The local ID for the associated diagram.
//	//	
//	//	
//	String	Geometry //	Read/Write
//	//	
//	//	The geometry associated with the current connector in this diagram.
//	//	
//	//	
//	Long	InstanceID //	Read only
//	//	
//	//	The connector identifier for the current model.
//	//	
//	//	
//	Boolean	IsHidden //	Read/Write
//	//	
//	//	A flag to indicate if this item is hidden or not.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	Path //	Read/Write
//	//	
//	//	The path of the connector in this diagram.
//	//	
//	//	
//	String	Style //	Read/Write
////	
////	Additional style information; for example, color or thickness.
//}
//
////associated with t_diagramobjects table in .eap file
//class DiagrammObject {
//	Long	Bottom //	Read/Write
//	//	
//	//	The bottom edge position of the element.
//	//	
//	//	
//	container Diagram Diagram opposite DiagramObjects //	Read/Write
//	//	
//	//	The ID of the associated diagram.
//	//	
//	//	
//	contains Element Element //	Read/Write
//	//	
//	//	The ElementID of the object instance in this diagram.
//	//	
//	//	
//	Long	InstanceID //	Read
//	//	
//	//	The attribute that holds the connector identifier for the current model.
//	//	
//	//	
//	Long	Left //	Read/Write
//	//	
//	//	The left edge position of the element.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	Long	Right //	Read/Write
//	//	
//	//	The right edge position of the element.
//	//	
//	//	
//	Long	Sequence //	Read/Write
//	//	
//	//	The sequence position when loading the object into the diagram (this affects its Z order).
//	//	
//	//	The Z-order is one-based and the lowest value is in the foreground.
//	//	
//	//	
//	//Variant	Style	//	Read/Write
//	//	
//	//	The style information for this object. Returns a semi-colon delimited string that defines the current style settings. Changing a value will completely overwrite the previously existing value, so caution is advised to avoid losing existing style information that you want to keep.
//	//	
//	//	
//	Long	Top //	Read/Write
////	
////	The top edge position of the element.
////	
////	
//}

//associated with t_object table in .eap file
class Element {
	String	Abstract //	Read/Write	
	//		
	//	Indicates if the element is Abstract (1) or Concrete (0).	
	//		
	//		
	String	ActionFlags //	Read/Write	
	//		
	//	A structure to hold flags concerned with Action semantics.	
	//		
	//		
	String	Alias //	Read/Write	
	//		
	//	An optional alias for this element.	
	//		
	//		
//	Long	AssociationClassConnectorID //	Read only	
//	//		
//	//	If the element is an AssociationClass, AssociationClassConnectorID contains the Connector ID of the respective Association connector.	
//	//
	contains Attribute[] Attributes opposite Parent //	Read only	
	//		
	//	A collection of Attribute objects for the current element; use the AddNew and Delete functions to manage attributes.	
	//		
	//		
	//contains Attribute[] AttributesEx //	Read only DERIVED	
	//		
	//	A collection of Attribute objects belonging to the current element and its parent elements.	
	//		
	//		
	String	Author //	Read/Write	
	//		
	//	The element author.	
	//		
	//		
//	contains Element[] BaseClasses //	Read only	
	//		
	//	A list of Base Classes for this element, presented as a collection for convenience.	
	//		
	//		
	//Long	ClassfierID //	Deprecated	
	//		
	//	See ClassifierID. Deprecated because of misspelling.	
	//		
	//		
	refers Element Classifier //	Read/Write
	//		
	//	The ElementID of a Classifier associated with this element; that is, the base type.	
	//		
	//	Only valid for instance type elements (such as Object or Sequence).	
	//		
	//	
	String Classifier_guid	
//	String	ClassifierName //	Read/Write DERIVED
	//		
	//	Name of associated Classifier (if any).	
	//		
	//		
//	String	ClassifierType //	Read only DERIVED
	//		
	//	Type of associated Classifier.	
	//		
	//		
	String	Complexity //	Read/Write	
	//		
	//	A complexity value indicating how complex the element is; used for metric reporting and estimation.	
	//		
	//	Valid values are: 1 for Easy, 2 for Medium, 3 for Difficult.	
	//		
	//		
//	contains Diagram CompositeDiagram //	Read only	
	//		
	//	If the element is Composite, returns its associated diagram; otherwise returns null.	
	//		
	//		
//	refers Connector[] Connectors //	Read only	
	//		
	//	Returns a collection containing the connectors to other elements.	
	//		
	//		
	//	contains Constraint[] Constraints //	Read only	
	//		
	//	A collection of Constraint objects.	
	//		
	//		
	//contains Constraint[] ConstraintsEx //	Read only	DERIVED
	//		
	//	Collection of Constraint objects belonging to the current element and its parent elements.	
	//		
	//		
	Date	CreatedDate //	Read/Write	
	//		
	//	The date the element was created.	
	//		
	//		
	//Collection	CustomProperties	//	Read only	
	//		
	//	List of advanced properties for an element.	
	//		
	//	The collection of advanced properties differs depending on element type; for example, an Action and an Activity have different advanced properties.	
	//		
	//	Currently only editable from the user interface.	
	//		
	//		
//	contains Diagram[] Diagrams //	Read only	
	//		
	//	Returns a collection of sub-diagrams (child diagrams) attached to this element as seen in the tree view.	
	//		
	//		
	//	contains Effort[] Efforts //	Read only	
	//		
	//	A collection of Effort objects.	
	//		
	//		
	String	ElementGUID //	Read only	
	//		
	//	A globally unique ID for this element; that is, unique across all model files.	
	//		
	//		
	Long 	ElementID //	Read only	
	//		
	//	The local ID of the Element; valid for this file only.	
	//		
	//
	contains Element[] Elements opposite Parent //	Read only	
	//		
	//	Returns a collection of child elements (sub-elements) attached to this element as seen in the tree view.	
	//		
	//	
//	contains Element[] EmbeddedElements //	Read only Später derived als Untermenge von Elements
	//		
	//	A list of elements that are embedded into this element, such as Ports, Parts, Pins and Parameter Sets.	
	//		
	//		
	String	EventFlags //	Read/Write	
	//		
	//	A structure to hold a variety of flags to do with signals or events.	
	//		
	//		
//	String	ExtensionPoints //	Read/Write	
	//		
	//	Optional extension points for a Use Case as a comma-separated list.	
	//		
	//		
	//	contains File[] Files //	Read only	
	//		
	//	A collection of File objects.	
	//		
	//		
	String	GenFile //	Read/Write	
	//		
	//	The file associated with this element for code generation and synchronization purposes; can include macro expansion tags for local conversion to full path.	
	//		
	//		
	String	Genlinks //	Read/Write	
	//		
	//	Links to other Classes discovered at code reversing time; Parents and Implements connectors only.	
	//		
	//		
	String	GenType //	Read/Write	
	//		
	//	The code generation type; for example, Java, C++, C#, VBNet, Visual Basic, Delphi.	
	//		
	//		
	//Variant	Header1	//	Read/Write	
	//		
	//	A user defined string for inclusion as header in the source files generated.	
	//		
	//		
	//Variant	Header2	//	Read/Write	
	//		
	//	Same as for Header1, but used in the CPP source file.	
	//		
	//		
	Boolean	IsActive //	Read/Write	
	//		
	//	Boolean value indicating whether the element is active or not.	
	//		
	//	1 = True, 0 = False.	
	//		
	//		
//	Boolean	IsComposite //	Read/Write	
	//		
	//	Indicates whether the element is composite or not.	
	//		
	//	1 = True, 0 = False.	
	//		
	//		
	Boolean	IsLeaf //	Read/Write	
	//		
	//	Boolean value indicating whether the element is in leaf node or not.	
	//		
	//	1 = True, 0 = False.	
	//		
	//		
//	Boolean	IsNew //	Read/Write	
	//		
	//	Boolean value indicating whether the element is new or not.	
	//		
	//	1 = True, 0 = False.	
	//		
	//		
	Boolean	IsSpec //	Read/Write	
	//		
	//	Boolean value indicating whether the element is a specification or not.	
	//		
	//	1 = True, 0 = False.	
	//		
	//		
	//	contains Issue[] Issues //	Read only	
	//		
	//	Collection of Issue objects.	
	//		
	//		
//	Boolean	Locked //	Read/Write	
	//		
	//	Indicates if the element has been locked against further change.	
	//		
	//		
//	String	MetaType //	Read only	
	//		
	//	The element's domain-specific meta type, as defined by an applied stereotype from an MDG Technology.	
	//		
	//		
	contains Method[] Methods opposite Parent //	Read only	
	//		
	//	Collection of Method objects for current element.	
	//		
	//		
	//contains Method[] MethodsEx //	Read only	DERIVED
	//		
	//	Collection of Method objects belonging to the current element and its parent elements.	
	//		
	//		
	//	contains Metric[] Metrics //	Read only	
	//		
	//	Collection of Metric elements for current element.	
	//		
	//		
//	String	MiscData //	Read only	
	//		
	//	This low-level property provides information about the contents of the PDatax fields.	
	//		
	//	These database fields are not documented, and developers must gain understanding of these fields through their own endeavors to use this property.	
	//		
	//	MiscData is zero based, therefore:	
	//		
	//	·	MiscData(0) corresponds to PData1
	//	·	MiscData(1) to PData2
	//		
	//	and so on.	
	//		
	//		
	Date	ModifiedDate //	Read/Write	
	//		
	//	The date the element was last modified.	
	//		
	//		
	String	Multiplicity //	Read/Write	
	//		
	//	Multiplicity value for this element.	
	//		
	//		
	String	Name //	Read/Write	
	//		
	//	The element name; should be unique within the current Package.	
	//		
	//		
	String	Notes //	Read/Write	
	//		
	//	Further descriptive text about the element.	
	//		
	//		
	//ObjectType	ObjectType	//	Read only	
	//		
	//	Distinguishes objects referenced through a Dispatch interface.	
	//		
	//		
	container Package Package opposite Elements //	Read/Write	
	//		
	//	A local ID for the Package containing this element.	
	//		
	//	
	container Element Parent opposite Elements //	Read/Write	
	//		
	//	If this element is a child of another, used to set or retrieve the ElementID of the other element; if not, returns 0.	
	//		
	//		
	//Collection	Partitions	//	Read only	
	//		
	//	List of logical partitions into which an element can be divided.	
	//		
	//	Only valid for elements that support partitions, such as Activities and States.	
	//		
	//		
	String	Persistence //	Read/Write	
	//		
	//	The persistence associated with this element; can be Persistent or Transient.	
	//		
	//		
	String	Phase //	Read/Write	
	//		
	//	The phase this element is scheduled to be constructed in; any string value.	
	//		
	//		
//	String	Priority //	Read/Write	
	//		
	//	The priority of this element as compared to other project elements; only applies to Requirement, Change and Issue types, otherwise ignored.	
	//		
	//	Valid values are: Low, Medium and High.	
	//		
	//		
	//Properties	Properties	//	Returns a list of specialized properties that apply to the element that might not be available using the automation model.	
	//		
	//	The properties are purposely undocumented because of their obscure nature and because they are subject to change as progressive enhancements are made to them.	
	//		
	//		
//	Long	PropertyType //	Read/Write	
	//		
	//	The ElementID of a Type associated with this element; only valid for Port and Part elements.	
	//		
	//		
//	String	PropertyTypeName //	Read	
	//		
	//	The name of a Type associated with this element; only valid for Port and Part elements.	
	//		
	//		
	//Collection	Realizes	//	Read only	
	//		
	//	List of Interfaces realized by this element for convenience.	
	//		
	//		
	//	contains Requirement[] Requirements //	Read only	
	//		
	//	Collection of Requirement objects.	
	//		
	//		
	//contains Requirement[] RequirementsEx //	Read only	 DERIVED
	//		
	//	Collection of Requirement objects belonging to the current element and its parent elements.	
	//		
	//		
	//	contains Resource[] Resources //	Read only	
	//		
	//	Collection of Resource objects for current element.	
	//		
	//		
	//	contains Risk[] Risks //	Read only	
	//		
	//	Collection of Risk objects.	
	//		
	//		
	String	RunState //	Read/Write	
	//		
	//	The object's runstate list as a string.	
	//		
	//		
	//	contains Scenario[] Scenarios //	Read only	
	//		
	//	Collection of Scenario objects for current element.	
	//		
	//		
	//Collection	StateTransitions	//	Read only	
	//		
	//	List of State Transitions that an element can support; applies in particular to Timing elements.	
	//		
	//		
	String	Status //	Read/Write	
	//		
	//	Sets or gets the status, such as Proposed or Approved.	
	//		
	//		
	String	Stereotype //	Read/Write	
	//		
	//	The primary element stereotype; the first of the list of stereotypes you can access using the StereotypeEx attribute.	
	//		
	//		
	//String	StereotypeEx //	Read/Write	 DERIVED
	//		
	//	All the applied stereotypes of the element in a comma-separated list.	
	//		
	//		
	String	StyleEx //	Read/Write	
	//		
	//	Advanced style settings; reserved for the use of Sparx Systems.	
	//		
	//		
//	Long	Subtype //	Read/Write	
	//		
	//	A numeric subtype that qualifies the Type of the main element	
	//		
	//	·	For Event: 0 = Receiver, 1 = Sender
	//	·	For Class: 1 = Parameterised, 2 = Instantiated, 3 = Both, 0 = Neither, 
	//		17 = Association Class
	//		
	//		
	//		
	//	If 17, because an Association Class has been created through the user interface, MiscData(3) contains the ID of the related Association; as MiscData is read-only, you cannot create an Association Class through the Automation Interface:	
	//		
	//	·	For Note: 1 = Note linked to connector, 2 = Constraint linked to connector
	//	·	For StateNode: 100 = ActivityIntitial, 101 = ActivityFinal
	//	·	For Activity: 0 = Activity, 8 = composite Activity (also set to 8 for other composite elements such as Use Cases)
	//	·	For Synchronization: 0 = Horizontal, 1 = Vertical
	//		
	//		
	//		
	//	Note that there are many more Types than indicated in the above examples.	
	//		
	//		
//	String	Tablespace //	Read/Write	
	//		
	//	Associated tablespace for a Table element.	
	//		
	//		
//	String	Tag //	Read/Write	
	//		
	//	Corresponds to the Keywords field in the Enterprise Architect user interface.	
	//		
	//		
//	contains TaggedValue[] TaggedValues //	Read only	
	//		
	//	Returns a collection of TaggedValue objects.	
	//		
	//		
	//contains TaggedValue[] TaggedValuesEx //	Read only	DERIVED
	//		
	//	Returns a collection of TaggedValue objects belonging to the current element and the elements specialized or realized by the current element.	
	//		
	//		
	//	contains TemplateParameter[] TemplateParameters //	Read Only	
	//		
	//	A collection of TemplateParameter objects.	
	//		
	//		
	//		
	//		
	//	contains Test[] Tests //	Read only	
	//		
	//	A collection of Test objects for the current element.	
	//		
	//		
	Long	TreePos //	Read/Write	
	//		
	//	Sets or gets the tree position.	
	//		
	//		
	String	Type //	Read/Write	
	//		
	//	The element type (such as Class, Component).	
	//		
	//	Note that Type is case sensitive inside Enterprise Architect and should be provided with an initial capital (proper case); valid types are:	
	//		
	//		
	//	Action	InteractionFragment
	//	Activity	InteractionOccurrence
	//	ActivityPartition	InteractionState
	//	ActivityRegion	Interface
	//	Actor	InterruptibleActivityRegion
	//	Artifact	Issue
	//	Association	Node
	//	Boundary	Note
	//	Change	Object
	//	Class	Package
	//	Collaboration	Parameter
	//	Component	Part
	//	Constraint	Port
	//	Decision	ProvidedInterface
	//	DeploymentSpecification	Report
	//	DiagramFrame	RequiredInterface
	//	EmbeddedElement	Requirement
	//	Entity	Screen
	//	EntryPoint	Sequence
	//	Event	State
	//	ExceptionHandler	StateNode
	//	ExitPoint	Synchronization
	//	ExpansionNode	Text
	//	ExpansionRegion	TimeLine
	//	Feature	UMLDiagram
	//	GUIElement 	UseCase
	//		
	String	Version //	Read/Write	
	//		
	//	The version of the element.	
	//		
	//		
	String	Visibility //	Read/Write	
//		
//	The Scope of this element within the current Package.	
//		
//	Valid values are: Public, Private, Protected or Package.	
//		
//	
String Style 
int  Backcolor
int  BorderStyle
int  BorderWidth
int  Fontcolor
int  Bordercolor
String Cardinality
String Concurrency
String PDATA1
}

//associated with t_operation table in .eap file
class Method {
	Boolean	Abstract //	Read/Write	
	//		
	//	A flag indicating if the method is abstract (1) or not (0).	
	//		
	//		
	String	Behaviour //	Read/Write	
	//		
	//	Some further explanatory behavior notes (for example, pseudocode).	
	//		
	//	In earlier releases of Enterprise Architect this attribute had the UK/Australian spelling 'Behaviour'; this is still present for backwards compatibility, but please now use the 'Behavior' attribute for consistency.	
	//		
	//		
	String Classifier //	Read/Write	
	//		
	//	The Classifier ID that applies to the ReturnType.	
	//		
	//		
	String	Code //	Read/Write	
	//		
	//	An optional field to hold the method code (used for the Initial Code field).	
	//		
	//		
	//Variant	Concurrency	//	Read/Write	
	//		
	//	Indicates the concurrency type of the method.	
	//		
	//		
	Boolean	IsConst //	Read/Write	
	//		
	//	A flag indicating that the method is Const.	
	//		
	//		
	Boolean	IsLeaf //	Read/Write	
	//		
	//	A flag to indicate if the method is Leaf (cannot be overridden).	
	//		
	//		
	Boolean	IsPure //	Read/Write	
	//		
	//	A flag indicating that the method is defined as Pure in C++.	
	//		
	//		
	Boolean	IsQuery //	Read/Write	
	//		
	//	A flag to indicate if the method is a query (that is, does not alter Class variables).	
	//		
	//		
	Boolean	IsRoot //	Read/Write	
	//		
	//	A flag to indicate if the method is Root.	
	//		
	//		
	Boolean	IsStatic //	Read/Write	
	//		
	//	A flag to indicate a static method.	
	//		
	//		
	Boolean	IsSynchronized //	Read/Write	
	//		
	//	A flag indicating a Synchronized method call.	
	//		
	//		
	String	MethodGUID //	Read/Write	
	//		
	//	A globally unique ID for the current method. This is system generated.	
	//		
	//		
	Long	MethodID //	Read only	
	//		
	//	A local ID for the current method, only valid within this .EAP file.	
	//		
	//		
	String	Name //	Read/Write	
	//		
	//	The method name.	
	//		
	//		
	String	Notes //	Read/Write	
	//		
	//	Descriptive notes on the method.	
	//		
	//		
	//ObjectType	ObjectType	//	Read only	
	//		
	//	Distinguishes objects referenced through a Dispatch interface.	
	//		
	//		
//	contains Parameter[] Parameters //	Read only	
	//		
	//	The Parameters collection for the current method, used to add and access parameter objects for the current method.	
	//		
	//		
	container Element Parent opposite Methods //	Read only	
	//		
	//	Returns the ElementID of the element that this method belongs to.	
	//		
	//		
	Long	Pos //	Read/Write	
	//		
	//	Specifies the position of the method within the set of operations defined for a Class.	
	//		
	//		
//	contains PreCondition[] PreConditions opposite Method //	Read only	
//	//		
//	//	The PostConditions (constraints) as they apply to this method. This returns a MethodConstraint object of type post.	
//	//		
//	//		
//	contains PostCondition[] PostConditions opposite Method //	Read only	
	//		
	//	The PreConditions (constraints) as they apply to this method. This returns a MethodConstraint object of type pre.	
	//		
	//		
	Boolean	ReturnIsArray //	Read/Write	
	//		
	//	A flag to indicate that the return value is an array.	
	//		
	//		
	String	ReturnType //	Read/Write	
	//		
	//	The return type for the method; this can be a primitive data type or a Class or Interface type.	
	//		
	//		
	String	StateFlags //	Read/Write	
	//		
	//	Some flags as applied to methods in State elements.	
	//		
	//		
	String	Stereotype //	Read/Write	
	//		
	//	The method stereotype (optional).	
	//		
	//		
	//String	StereotypeEx //	Read/Write	DERIVED
	//		
	//	All the applied stereotypes of the method in a comma-separated list.	
	//		
	//		
	String	Style //	Read/Write	
	//		
	//	Contains the Alias property for this method.	
	//		
	//		
	String	StyleEx //	Read/Write	
	//		
	//	Advanced style settings, reserved for the use of Sparx Systems.	
	//		
	//		
//	contains MethodTag[] TaggedValues //	Read only	
	//		
	//	The TaggedValues collection for the current method. This accesses a list of MethodTag objects.	
	//
	String	Throws	//	Read/Write	
	//		
	//	Exception information. Valid input for setting the Throws is:	
	//		
	//	·	GUID String - the GUID of an element in the model or a comma-separated list of element GUIDS
	//	·	<none> - removes the existing Throws set
	//		
	//		
	String	Visibility //	Read/Write	
//		
//	The method scope - Public, Protected, Private or Package.	
//		
//
String Concurrency
String GenOption
}

////associated with t_operationpres and t_operationposts table in .eap file
//abstract class MethodConstraint {
////	container Method Method
//	 //	Read/Write
//	//	
//	//	The local ID of the associated method.
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Descriptive notes about this constraint.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	Type //	Read/Write
////	
////	The constraint type.
//}

//class PreCondition extends MethodConstraint {
//	container Method Method opposite PreConditions
//	
//	String PreCondition
//}
//
//class PostCondition extends MethodConstraint {
//	container Method Method opposite PostConditions
//	
//	String PostCondition
//}

////associated with t_operationtag table in .eap file
//class MethodTag {
//	String	FQName //	Read only
//	//	
//	//	The fully-qualified name of the tag.
//	//	
//	//	
//	Long	MethodID //	Read/Write
//	//	
//	//	The ID of the associated method.
//	//	
//	//	
//	String	Name //	Read/Write
//	//	
//	//	The tag or name of the property.
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Further descriptive notes about this tag. 
//	//	
//	//	If Value (below) is set to "<memo>", then Notes should contain the actual Tagged Value content.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	TagGUID //	Read/Write
//	//	
//	//	A unique GUID for this Tagged Value.
//	//	
//	//	
//	Long	TagID //	Read only
//	//	
//	//	A unique ID for this Tagged Value.
//	//	
//	//	
//	String	Value //	Read/Write
////	
////	The value assigned to this tag.
////	
////	This field has a 255 character limit. If the value is greater than 255 characters long, set the value to "<memo>" and insert the body of text in the Notes attribute (above). 
////	
////	When reading existing Tagged Values, if Value = "<memo>" then the developer should read the actual body of text from the Notes attribute.
////	
////	
//}

//associated with t_package table in .eap file
class Package {
	String PackageGUID
	
	Long	BatchLoad //	Read/Write
	//	
	//	Flag to indicate that the Package is batch loaded during batch import from controlled Packages.
	//	
	//	Not currently used.
	//	
	//	
	Long	BatchSave //	Read/Write
	//	
	//	Boolean value to indicate whether the Package is included in the batch XMI export list or not.
	//	
	//	
	String	CodePath //	Read/Write
	//	
	//	The path where associated source code is found.
	//	
	//	Not currently used.
	//	
	//	
//	contains Connector[] Connectors //	Read only
	//	
	//	The collection of connectors.
	//	
	//	
	Date	CreatedDate //	Read/Write
	//	
	//	Date the Package was created.
	//	
	//	
//	contains Diagram[] Diagrams opposite Package //	Read only
	//	
	//	A collection of diagrams contained in this Package.
	//	
	//	
//	contains Element Element //	Read only
//	//	
//	//	The associated element object; use to get/set common information such as Stereotype, Complexity, Alias, Author, Constraints, Tagged Values and Scenarios.
//	//	
//	//	
	contains Element[] Elements opposite Package //	Read only
	//	
	//	A collection of elements that belong to this Package.
	//	
	//	
	String	Flags //	Read/Write
	//	
	//	Extended information about the Package.
	//	
	//	
	Boolean	IsControlled //	Read/Write
	//	
	//	Indicates if the Package has been marked as Controlled.
	//	
	//	
	Boolean	IsNamespace //	Read/Write
	//	
	//	True indicates that 'Package is a Namespace root'.
	//	
	//	Use 0 and 1 to set False and True.
	//	
	//	
	Boolean	IsProtected //	Read/Write
	//	
	//	Indicates if the Package has been marked as Protected.
	//	
	//	
	Date	LastLoadDate //	Read/Write
	//	
	//	The date XML was last loaded for the Package.
	//	
	//	
	Date	LastSaveDate //	Read/Write
	//	
	//	The date XML was last saved from the Package.
	//	
	//	
	Boolean	LogXML //	Read/Write
	//	
	//	Indicates if XMI export information is to be logged.
	//	
	//	
	Date	ModifiedDate //	Read/Write
	//	
	//	Date the Package was last modified.
	//	
	//	
	String	Name //	Read/Write
	//	
	//	The name of the Package.
	//	
	//	
	String	Notes //	Read/Write
	//	
	//	Notes about this Package.
	//	
	//	
	//ObjectType	ObjectType	//	Read only
	//	
	//	Distinguishes objects referenced through a Dispatch interface.
	//	
	//	
	String	Owner //	Read/Write.
	//	
	//	The Package owner when using controlled Packages.
	//	
	//	
	//Variant	PackageGUID	//	Read only
	//	
	//	The global Package ID; valid across models.
	//	
	//	
	Long	PackageID //	Read only
	//	
	//	The local Package ID number.
	//	
	//	Valid only in this model file.
	//	
	//	
	contains Package[] Packages opposite Parent //	Read only
	//	
	//	A collection of contained Packages that can be walked through.
	//	
	//	
	container Package Parent opposite Packages //	Read/Write
	//	
	//	The ID of the Package that is the parent of this one.
	//	
	//	0 indicates this Package is a model (that is, it has no parent).
	//	
	//	
	Long	TreePos //	Read/Write
	//	
	//	The relative position in the tree compared to other Packages (use to sort Packages).
	//	
	//	
	String	UMLVersion //	Read/Write
	//	
	//	The UML version for XMI export purposes.
	//	
	//	
	Boolean	UseDTD //	Read/Write
	//	
	//	Indicates if a DTD is to be used when exporting XMI.
	//	
	//	
	String	Version //	Read/Write
	//	
	//	The version of the Package.
	//	
	//	
	String	XMLPath //	Read/Write
//	
//	The path to which the XML is saved when using controlled Packages.
//	
//	
}

////associated with t_operationparams table in .eap file
//class Parameter {
//	String	Alias //	Read/Write
//	//	
//	//	An optional alias for this parameter.
//	//	
//	//	
//	String	ClassifierID //	Read/Write
//	//	
//	//	A ClassifierID for the parameter, if known.
//	//	
//	//	
//	String	Default //	Read/Write
//	//	
//	//	A default value for this parameter.
//	//	
//	//	
//	Boolean	IsConst //	Read/Write
//	//	
//	//	A flag indicating that the parameter is Const (cannot be altered).
//	//	
//	//	
//	String	Kind //	Read/Write
//	//	
//	//	The parameter kind - in, inout, out, or return.
//	//	
//	//	
//	String	Name //	Read/Write
//	//	
//	//	The parameter name; this must be unique for a single method.
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Descriptive notes.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	Long	OperationID //	Read only
//	//	
//	//	The ID of the method associated with this parameter.
//	//	
//	//	
//	String	ParameterGUID //	Read/Write
//	//	
//	//	A system generated, globally unique ID for the current Parameter.
//	//	
//	//	
//	Long	Position //	Read/Write
//	//	
//	//	The position of the parameter in the argument list.
//	//	
//	//	
//	String	Stereotype //	Read/Write
//	//	
//	//	The first stereotype of the parameter.
//	//	
//	//	
//	String	StereotypeEx //	Read/Write
//	//	
//	//	All the applied stereotypes of the parameter in a comma-separated list.
//	//	
//	//	
//	String	Style //	Read/Write
//	//	
//	//	Some style information.
//	//	
//	//	
//	String	StyleEx //	Read/Write
//	//	
//	//	Advanced style settings, reserved for the use of Sparx Systems.
//	//	
//	//	
//	contains ParamTag[] TaggedValues //	Read/Write
////	
////	The GUID of the parameter with which this ParamTag is associated.
////	
////	
////Variant	Type	//	Read/Write
////	
////	The parameter type; can be a primitive type or a defined classifier.
//}

//associated with t_taggedvalue table in .eap file
//class ParamTag {
//	String	ElementGUID //	Read/Write
//	//	
//	//	The GUID of the parameter with which this ParamTag is associated.
//	//	
//	//	
//	String	FQName //	Read only
//	//	
//	//	The fully qualified name of the tag.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	PropertyGUID //	Read/Write
//	//	
//	//	A system generated GUID to identify the Tagged Value.
//	//	
//	//	
//	String	Tag //	Read/Write
//	//	
//	//	The actual tag name.
//	//	
//	//	
//	String	Value //	Read/Write
////	
////	The value associated with this tag.
////	
////	
//}

////associated with t_objectproperties table in .eap file
//class TaggedValue {
//	Long	ElementID //	Read/Write
//	//	
//	//	The local ID of the associated element.
//	//	
//	//	
//	String	FQName //	Read only
//	//	
//	//	The fully-qualified name of the tag.
//	//	
//	//	
//	String	Name //	Read/Write
//	//	
//	//	The name of the tag.
//	//	
//	//	
//	String	Notes //	Read/Write
//	//	
//	//	Further descriptive notes about this tag. 
//	//	
//	//	If Value (below) is set to "<memo>", then Notes should contain the actual Tagged Value content.
//	//	
//	//	
//	//ObjectType	ObjectType	//	Read only
//	//	
//	//	Distinguishes objects referenced through a Dispatch interface.
//	//	
//	//	
//	String	PropertyGUID //	Read/Write
//	//	
//	//	The global ID of the tag.
//	//	
//	//	
//	Long	PropertyID //	Read only
//	//	
//	//	The local ID of the tag.
//	//	
//	//	
//	String	Value //	Read/Write
////	
////	The value assigned to this tag.
////	
////	This field has a 255 character limit. If the value is greater than 255 characters long, set the value to "<memo>" and insert the body of text in the Notes attribute (above). 
////	
////	When reading existing Tagged Values, if Value = "<memo>" then the developer should read the actual body of text from the Notes attribute.
////	
////	
//}




