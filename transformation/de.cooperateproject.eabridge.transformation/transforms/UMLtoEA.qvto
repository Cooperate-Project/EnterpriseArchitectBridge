transformation UMLtoEA(in uml: UML,in ecorePrimitives : UML, out om: OM);
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype OM uses eaobjectmodel('de.cooperateproject.eabridge.eaobjectmodel');

main() {

	var rootModels := uml.rootObjects()[Model];
	assert fatal (rootModels->size() = 1);

	log("Found Root Models", rootModels);
	
	rootModels -> map mapRootModel();

}

mapping uml::Model::mapRootModel() : eaobjectmodel::Package {
	
	log("Mapping root model", self);
	
	Name := self.name;
	Packages := self.nestedPackage-> map mapPackages();
	
	// FIXME: Root Model package ID always 1?
	PackageID := 1;
	
	// Create package element
	Elements := self.nestedPackage-> map mapPackageToElement();
	
	// TODO: Map Associations
	
}

mapping uml::Package::mapPackages() : eaobjectmodel::Package {
	
	log("Mapping package", self);
	
	// TODO: Package ID?
	
	Name := self.name;	
	Packages := self.nestedPackage-> map mapPackages();
	
	// Create package element
	Elements := self.nestedPackage-> map mapPackageToElement();
	
	// Map Package content
	var classes := self.packagedElement->selectByType(UML::Class);
	var interfaces := self.packagedElement->selectByType(UML::Interface);
	
	Elements += classes -> map mapClassToElement();
	// TODO: Elements += interfaces -> map mapInterfaceToElement();
	
	// TODO: What else?
}

mapping uml::Package::mapPackageToElement() : eaobjectmodel::Element {
	
	Name := self.name;
	
}

mapping uml::Class::mapClassToElement(): eaobjectmodel::Element {
	
	log("Mapping class", self);
	
	Name := self.name;
	Abstract := if (self.isAbstract) then "1" else "0" endif;
	
	// FIXME: Conversion of Scope to ScopeObject fails (but ScopeObject -> Scope works)
	Visibility := self.visibility.transformVisibility().oclAsType(ScopeObject);

	
	log("Input element visibility:", self.visibility);
	log("Output element visibility:", result.Visibility);
	
	// TODO: Generalisation etc.
	
	// TODO: Attributes & Operations
	Attributes := self.ownedAttribute -> map mapPropertyToAttribute();
	
}

query VisibilityKind::transformVisibility() : Scope {
	
	// Incremental?
	var visibilityScope = switch {
		case (self = VisibilityKind::public) Scope::Public;
		case (self = VisibilityKind::private) Scope::Private;
		case (self = VisibilityKind::protected) Scope::Protected;
		case (self = VisibilityKind::package) Scope::Package;
		else assert error (false) with log("Illegal enum value");
	};
	
	return visibilityScope;
	
}

mapping uml::Property::mapPropertyToAttribute(): Attribute {
	
	log("Mapping attribute", self);
	
	Name := self.name;

	result.Scope := self.visibility.transformVisibility();
	AttributeType := self.type.map mapTypeToTypeReference();
	
}

mapping uml::Type::mapTypeToTypeReference(): TypeReference 
disjuncts 
uml::PrimitiveType::primitiveTypeToTypeReference, 
uml::DataType::dataTypeToTypeReference 
{}

mapping uml::PrimitiveType::primitiveTypeToTypeReference() : TypeReference {
	
	log("Mapping primitive type", self);
	
	// TODO
}

mapping uml::DataType::dataTypeToTypeReference() : TypeReference {
	
	log("Mapping type reference", self);
	
	// TODO
}